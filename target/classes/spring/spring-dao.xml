<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 配置整合 mybatis 过程 -->
    <!-- 1: 配置数据库相关参数 properties 的属性: ${url} -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 2: 数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>

        <!-- c3p0 连接池的私有属性 -->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!-- 关闭连接后不自动 commit -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 获取连接超时等待时间 -->
        <property name="checkoutTimeout" value="10000"/>
        <!-- 当获取连接失败重复请求次数 -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!-- 约定大于配置 -->
    <!--3：核心：配置 SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 以下为 spring 和 mybatis 整合配置 -->
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置 mybatis 全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描 entity 包，配置别名，以达到 org.seckill.entity.Seckill 用 seckill 替代 -->
        <property name="typeAliasesPackage" value="org.seckill.entity"/>
        <!-- 扫描 sql 配置文件: mapper 需要的 xml 文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 4：配置扫描 DAO 接口包，在 spring 启动容器时，动态实现 DAO 接口，并注入 Spring 容器中 -->
    <!-- 最能节省工作量的配置，即节省了手动实现 DAO 接口工作 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入 SqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的 DAO 接口包-->
        <property name="basePackage" value="org.seckill.dao"/>
    </bean>
</beans>